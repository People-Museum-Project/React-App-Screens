{"ast":null,"code":"const baseurl = 'http://127.0.0.1:8080/db/';\nconst handleResponse = async response => {\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Something went wrong');\n  }\n  return data;\n};\nconst addUser = async (name, imageLink, description) => {\n  try {\n    const response = await fetch(`${baseurl}addUser`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        imageLink,\n        description\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst getUser = async userId => {\n  try {\n    const response = await fetch(`${baseurl}getUser`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst updateUser = async (userId, name, imageLink, description) => {\n  try {\n    const response = await fetch(`${baseurl}updateUser`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        name,\n        imageLink,\n        description\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst getPerson = async personId => {\n  try {\n    const response = await fetch(`${baseurl}getPerson`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        personId\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst updatePerson = async (personId, newName, newImageLink, newDescription, newContext, newPublic) => {\n  try {\n    const response = await fetch(`${baseurl}updatePerson`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        personId,\n        newName,\n        newImageLink,\n        newDescription,\n        newContext,\n        newPublic\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst getPersonList = async (userId, page = 1, limit = 10, sortBy = 'name', order = 'asc') => {\n  try {\n    const response = await fetch(`${baseurl}getPersonList`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        page,\n        limit,\n        sortBy,\n        order\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst getPersonListByCollection = async (collectionId, page = 1, limit = 10, sortBy = 'name', ascending = 'true') => {\n  const intCollectionId = parseInt(collectionId, 10);\n  try {\n    const response = await fetch(`${baseurl}getPersonListByCollection`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        collectionId: intCollectionId,\n        page,\n        limit,\n        sortBy,\n        ascending\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst getCollectionList = async (userId, page = 1, limit = 10, sortBy = 'name', order = 'asc') => {\n  try {\n    const response = await fetch(`${baseurl}getCollectionList`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId,\n        page,\n        limit,\n        sortBy,\n        order\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst addPersonCollection = async (personId, collectionId) => {\n  const intPersonId = parseInt(personId, 10);\n  const intCollectionId = parseInt(collectionId, 10);\n  try {\n    const response = await fetch(`${baseurl}addPersonCollection`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        personId: intPersonId,\n        collectionId: intCollectionId\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nconst getCollection = async collectionId => {\n  const intCollectionId = parseInt(collectionId, 10);\n  try {\n    const response = await fetch(`${baseurl}getCollection`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        collectionId: intCollectionId\n      })\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};\nmodule.exports = {\n  addUser,\n  getUser,\n  updateUser,\n  getPerson,\n  updatePerson,\n  getPersonList,\n  getCollectionList,\n  getPersonListByCollection,\n  addPersonCollection,\n  getCollection\n};","map":{"version":3,"names":["baseurl","handleResponse","response","data","json","ok","Error","message","addUser","name","imageLink","description","fetch","method","headers","body","JSON","stringify","error","console","getUser","userId","updateUser","getPerson","personId","updatePerson","newName","newImageLink","newDescription","newContext","newPublic","getPersonList","page","limit","sortBy","order","getPersonListByCollection","collectionId","ascending","intCollectionId","parseInt","getCollectionList","addPersonCollection","intPersonId","getCollection","module","exports"],"sources":["C:/Users/kayva/React-App-Screens/src/utils.js"],"sourcesContent":["const baseurl = 'http://127.0.0.1:8080/db/';\r\n\r\nconst handleResponse = async (response) => {\r\n  const data = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Something went wrong');\r\n  }\r\n  return data;\r\n};\r\n\r\nconst addUser = async (name, imageLink, description) => {\r\n  try {\r\n    const response = await fetch(`${baseurl}addUser`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ name, imageLink, description }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst getUser = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${baseurl}getUser`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userId }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst updateUser = async (userId, name, imageLink, description) => {\r\n  try {\r\n    const response = await fetch(`${baseurl}updateUser`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userId, name, imageLink, description }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst getPerson = async (personId) => {\r\n  try {\r\n    const response = await fetch(`${baseurl}getPerson`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ personId }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst updatePerson = async (personId, newName, newImageLink, newDescription, newContext, newPublic) => {\r\n  try {\r\n    const response = await fetch(`${baseurl}updatePerson`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ personId, newName, newImageLink, newDescription, newContext, newPublic }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst getPersonList = async (userId, page = 1, limit = 10, sortBy = 'name', order = 'asc') => {\r\n  try {\r\n    const response = await fetch(`${baseurl}getPersonList`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userId, page, limit, sortBy, order }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst getPersonListByCollection = async (collectionId, page = 1, limit = 10, sortBy = 'name', ascending = 'true') => {\r\n  const intCollectionId = parseInt(collectionId, 10);\r\n  try {\r\n    const response = await fetch(`${baseurl}getPersonListByCollection`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ collectionId: intCollectionId, page, limit, sortBy, ascending }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst getCollectionList = async (userId, page = 1, limit = 10, sortBy = 'name', order = 'asc') => {\r\n  try {\r\n    const response = await fetch(`${baseurl}getCollectionList`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userId, page, limit, sortBy, order }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst addPersonCollection = async (personId, collectionId) => {\r\n  const intPersonId = parseInt(personId, 10);\r\n  const intCollectionId = parseInt(collectionId, 10);\r\n  try {\r\n    const response = await fetch(`${baseurl}addPersonCollection`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ personId: intPersonId, collectionId: intCollectionId }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nconst getCollection = async (collectionId) => {\r\n  const intCollectionId = parseInt(collectionId, 10);\r\n  try {\r\n    const response = await fetch(`${baseurl}getCollection`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ collectionId: intCollectionId }),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addUser,\r\n  getUser,\r\n  updateUser,\r\n  getPerson,\r\n  updatePerson,\r\n  getPersonList,\r\n  getCollectionList,\r\n  getPersonListByCollection,\r\n  addPersonCollection,\r\n  getCollection,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}